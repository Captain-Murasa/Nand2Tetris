// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instraction type: A or C
    Not(in=instruction[15], out=AInstruction);
    Not(in=AInstruction, out=CInstruction);

    // Control bits
    And(a=CInstruction, b=instruction[5], out=d1);
    And(a=CInstruction, b=instruction[4], out=d2);
    And(a=CInstruction, b=instruction[3], out=d3, out=writeM);
    And(a=CInstruction, b=instruction[2], out=j1);
    And(a=CInstruction, b=instruction[1], out=j2);
    And(a=CInstruction, b=instruction[0], out=j3);

    And(a=CInstruction, b=instruction[11], out=c1);
    And(a=CInstruction, b=instruction[10], out=c2);
    And(a=CInstruction, b=instruction[9], out=c3);
    And(a=CInstruction, b=instruction[8], out=c4);
    And(a=CInstruction, b=instruction[7], out=c5);
    And(a=CInstruction, b=instruction[6], out=c6);

    // A Register
    // d1=1, ALU output relates to A
    And(a=CInstruction, b=d1, out=isLoadoutALU); 
    Mux16(a=instruction, b=outALU, sel=isLoadoutALU, out=Ainput);
    // if instruction is A-Instruction or d1=1, the computation refers to A
    Or(a=AInstruction, b=d1, out=Aload);
    ARegister(in=Ainput, load=Aload, out=Aout, out[0..14]=addressM);

    // D Register
    DRegister(in=outALU, load=d2, out=Dout);

    // ALU
    // 'a'=0, using Aout; 'a'=1, using inM
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);
    ALU(x=Dout, y=AMout, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outALU, zr=zero, ng=negative);

    // PC
    // jump or not
    Not(in=zero, out=notzero);
    Not(in=negative, out=notnegative);
    And(a=notzero, b=notnegative, out=positive);

    And(a=negative, b=j1, out=case1);
    And(a=zero, b=j2, out=case2);
    And(a=positive, b=j3, out=case3);

    Or(a=case1, b=case2, out=tmp);
    Or(a=tmp, b=case3, out=jump);
    Not(in=jump, out=inc);

    PC(in=Aout, load=jump, inc=inc, reset=reset, out[0..14]=pc);
}